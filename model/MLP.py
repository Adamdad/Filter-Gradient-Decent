import torchfrom torch import nnclass MLP(nn.Module):    def __init__(self, args):        super(MLP, self).__init__()        self.num_layer = len(args) - 1        layers = []        self.input_size = args[0]        for i in range(self.num_layer - 1):            layers.append(nn.Linear(args[i], args[i + 1]))            layers.append(nn.ReLU(inplace=True))        layers.append(nn.Linear(args[-2], args[-1]))        self.model = nn.Sequential(*layers)    def forward(self, x):        x = torch.flatten(x, 1)        y = self.model(x)        return y